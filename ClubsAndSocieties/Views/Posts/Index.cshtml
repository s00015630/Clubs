@model IEnumerable<ClubsAndSocieties.Models.Post>

@{
    ViewData["Title"] = "Index";
}

<h2 class="text-center">Posts</h2>


<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="responstable">
    <thead>
        <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Title)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PostMessage)
                </th>
            <th>
                @Html.DisplayNameFor(model => model.Event)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Student)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PostMessage)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Event.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Student.Course)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>

@*this code is for the testing of signalR

        <div class="room"></div>

    <label class="sr-only" for="message">Message</label>
    <input type="text" id="message" placeholder="your message...">

    <button type="submit" class="btn btn-primary" [disabled]="!messageForm.valid">Send SignalR Message</button>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/signalr/jquery.signalR.min.js"></script>
    <script src="signalr/hubs"></script>
    <script type="text/javascript" src="/signalr/hubs"></script>
    <script>
        var connection = $.hubConnection(), hub = connection.createHubProxy('chat');

        var join = function (msg) {
            $('<p>').text(msg).appendTo('.room');
        };

        hub.on('join', join);

        connection.start(function () {
            hub.invoke('join');
        });

    </script>*@ 


@* 
    <script>

     var transportType = signalR.TransportType.WebSockets;
     //can also be ServerSentEvents or LongPolling
     var logger = new signalR.ConsoleLogger(signalR.LogLevel.Information);
     var chatHub = new signalR.HttpConnection(`http://${document.location.host}/chat`, { transport: transportType, logger: logger });
     var chatConnection = new signalR.HubConnection(chatHub, logger);

     chatConnection.onClosed = e => {
         console.log('connection closed');
     };

     chatConnection.on('Send', (message) => {
         console.log('received message');
     });

     chatConnection.start().catch(err => {
         console.log('connection error');
     });

     function send(message) {
         chatConnection.invoke('Send', message);
     }

</script>*@

